Интеграционное тестирование

ИТ - это проверка совместной работы группы модулей.
ИТ - это тестирование единицы работы при отсутствии полного контроля над ней с использованием одной из
зависимостей.
    1. Монолитное тестирование
    2. Пошаговое тестирование

Пусть имеется некоторая программа, состоящая из модулей. Тогда МТ будет заключаться в том, что
каждый модуль протестируется отдельно, для каждого будет написан модуль-драйвер, передающий
модулю тестирования. Когда все модули протестированы по отдельности, программа тестируется целиком.

Недостатки МТ:
    - Требуется большое кол-во действий (драйвер и заглушки)
    - Поздно обнаруживаются ошибки в межмодульных взаимодействиях
    - Сложнее производить отладку программы

Преимущества МТ:
    - Возможность паралльльной организации работ на начальной фазе тестирования

Пошаговое тестирование
Предполагаем, что модули тестируются не изолированно, а подключаются к набору уже оттестированных модулей.
Выделяют две принципиально различные стратегиии выполнения ПТ:
    1. Нисходящее тестирование
    2. Восходящее тестирование

Нисходящее тестирование начинается с головного модуля. Либо для каждого теста своя заглушка,
либо написать заглушку бета чтобы данные читались из *. В качестве стратегии подключения модулей
можно использовать одну из следующих.
Стратегии:
    1. Подключаются наиболее важные модули с т.з. тестирования
    2. Подключаются модули, осуществляющие операции ио для того, чтобы обеспечить ...

Недостатки НТ:
    - Сложное проектирование промежуточных модулей, которые не были задействованы при реализации стратегии
    1 или 2.

Восходящее тестирование
Полностью противоположно НТ и начинается с терминальных, т.е. не вызывающих другие модули. Стратегия
подключения новых модулей основывается на степени критичности данного модуля в программе.
Недостаток:
    - Рабочая программа не существует пока не добавлен последний модуль а

Стратегия подключения модулей а также выбор тестированя определяется спецификоцй задач.

При модульном тестировании, как правило, тестируются единицы работы, результаты которых либо возвращают
значения либо изменяют состояние системы. В ИТ проверяется... Тестируемый объект может не возвращать
значение и не сохранять состояние, но при этом может иметь сложную логику, приводить вызов объектов.
Можно считать, что тестирование взаимодействия управляется действиями, т.е. проверяется, какое действие
предвпринимает объект. Тестирование взаимодействий это сложный и долгий... следует проводить после
автономных тестов. При ИТ требуется большое кол-во.
Проблемы:
    - На их написание доп. время
    - Сложно писать заглушки для больших классов(методов, свойств)
    - Для сохранения состояния при вызове, много доп. стереотипного кода
    - Для проверки того, что параметры метода заданы правильно, нужны доп. затраты
    - Сложность повторного исп. заглушек в других тестах

Интеграционный тест, по сути дела тестирует один класс.
public class Auth()
{
    ;
}

[TestClass]
class AuthTest
{
    [TestMethod]

}
